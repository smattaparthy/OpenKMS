@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using OpenKMS.Services
@using OpenKMS.Models
@using OpenKMS.Models.Enums
@inject OpenKMS.Services.AuthService AuthService
@inject NavigationManager NavigationManager

<div class="min-vh-100 bg-secondary">
    @if (showNavbar)
    {
        <a href="#main-content" class="sr-only">Skip to content</a>
        <header role="banner">
            <nav class="navbar" aria-label="Primary">
                <div class="container d-flex align-items-center justify-content-between py-2">
                    <div class="d-flex align-items-center gap-3">
                        <div class="flex-shrink-0">
                            <h1 class="m-0" style="font-size: var(--text-xl); font-weight: var(--font-bold);">OpenKMS</h1>
                        </div>
                        <ul class="navbar-nav d-none d-sm-flex">
                            <li class="nav-item">
                                <NavLink href="/" class="nav-link" ActiveClass="active" Match="NavLinkMatch.All">
                                    Dashboard
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink href="/trainings" class="nav-link" ActiveClass="active">
                                    Trainings
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink href="/my-registrations" class="nav-link" ActiveClass="active">
                                    My Registrations
                                </NavLink>
                            </li>
                            @if (UserHasAdminRole)
                            {
                                <li class="nav-item">
                                    <NavLink href="/admin" class="nav-link" ActiveClass="active">
                                        Admin
                                    </NavLink>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <span class="text-secondary small">@currentUser?.FullName</span>
                        <button @onclick="Logout" class="btn btn-error btn-sm">
                            Logout
                        </button>
                    </div>
                </div>
            </nav>
        </header>
    }

    <main id="main-content" class="container py-5">
        @Body
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    private bool showNavbar = false;
    private User? currentUser;
    private bool UserHasAdminRole = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthentication();
            StateHasChanged();
        }
    }

    private async Task CheckAuthentication()
    {
        // Temporarily bypass authentication for testing
        var isAuthenticated = false; // await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated && !NavigationManager.Uri.Contains("/login") && !NavigationManager.Uri.Contains("/register"))
        {
            showNavbar = true;
            await LoadUserData();
        }
        else
        {
            // Show navbar without authentication for testing
            showNavbar = true;
            // Temporarily disable automatic redirect to login
            // if (!NavigationManager.Uri.Contains("/login") && !NavigationManager.Uri.Contains("/register"))
            // {
            //     NavigationManager.NavigateTo("/login");
            // }
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                UserHasAdminRole = currentUser.Role == UserRole.ADMIN;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load user data: {ex.Message}");
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }
}
